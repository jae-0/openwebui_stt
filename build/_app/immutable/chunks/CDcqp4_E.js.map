{"version":3,"file":"CDcqp4_E.js","sources":["../../../../../../src/lib/apis/index.ts"],"sourcesContent":["import { WEBUI_API_BASE_URL, WEBUI_BASE_URL } from '$lib/constants';\nimport { convertOpenApiToToolPayload } from '$lib/utils';\nimport { getOpenAIModelsDirect } from './openai';\n\nimport { toast } from 'svelte-sonner';\n\nexport const getModels = async (\n\ttoken: string = '',\n\tconnections: object | null = null,\n\tbase: boolean = false\n) => {\n\tlet error = null;\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/models${base ? '/base' : ''}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tlet models = res?.data ?? [];\n\n\tif (connections && !base) {\n\t\tlet localModels = [];\n\n\t\tif (connections) {\n\t\t\tconst OPENAI_API_BASE_URLS = connections.OPENAI_API_BASE_URLS;\n\t\t\tconst OPENAI_API_KEYS = connections.OPENAI_API_KEYS;\n\t\t\tconst OPENAI_API_CONFIGS = connections.OPENAI_API_CONFIGS;\n\n\t\t\tconst requests = [];\n\t\t\tfor (const idx in OPENAI_API_BASE_URLS) {\n\t\t\t\tconst url = OPENAI_API_BASE_URLS[idx];\n\n\t\t\t\tif (idx.toString() in OPENAI_API_CONFIGS) {\n\t\t\t\t\tconst apiConfig = OPENAI_API_CONFIGS[idx.toString()] ?? {};\n\n\t\t\t\t\tconst enable = apiConfig?.enable ?? true;\n\t\t\t\t\tconst modelIds = apiConfig?.model_ids ?? [];\n\n\t\t\t\t\tif (enable) {\n\t\t\t\t\t\tif (modelIds.length > 0) {\n\t\t\t\t\t\t\tconst modelList = {\n\t\t\t\t\t\t\t\tobject: 'list',\n\t\t\t\t\t\t\t\tdata: modelIds.map((modelId) => ({\n\t\t\t\t\t\t\t\t\tid: modelId,\n\t\t\t\t\t\t\t\t\tname: modelId,\n\t\t\t\t\t\t\t\t\towned_by: 'openai',\n\t\t\t\t\t\t\t\t\topenai: { id: modelId },\n\t\t\t\t\t\t\t\t\turlIdx: idx\n\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\trequests.push(\n\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\treturn modelList;\n\t\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trequests.push(\n\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\treturn await getOpenAIModelsDirect(url, OPENAI_API_KEYS[idx])\n\t\t\t\t\t\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\t\t\t\t\t\treturn res;\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\tobject: 'list',\n\t\t\t\t\t\t\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\t\t\t\t\t\t\turlIdx: idx\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequests.push(\n\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tobject: 'list',\n\t\t\t\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\t\t\t\turlIdx: idx\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst responses = await Promise.all(requests);\n\n\t\t\tfor (const idx in responses) {\n\t\t\t\tconst response = responses[idx];\n\t\t\t\tconst apiConfig = OPENAI_API_CONFIGS[idx.toString()] ?? {};\n\n\t\t\t\tlet models = Array.isArray(response) ? response : (response?.data ?? []);\n\t\t\t\tmodels = models.map((model) => ({ ...model, openai: { id: model.id }, urlIdx: idx }));\n\n\t\t\t\tconst prefixId = apiConfig.prefix_id;\n\t\t\t\tif (prefixId) {\n\t\t\t\t\tfor (const model of models) {\n\t\t\t\t\t\tmodel.id = `${prefixId}.${model.id}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst tags = apiConfig.tags;\n\t\t\t\tif (tags) {\n\t\t\t\t\tfor (const model of models) {\n\t\t\t\t\t\tmodel.tags = tags;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlocalModels = localModels.concat(models);\n\t\t\t}\n\t\t}\n\n\t\tmodels = models.concat(\n\t\t\tlocalModels.map((model) => ({\n\t\t\t\t...model,\n\t\t\t\tname: model?.name ?? model?.id,\n\t\t\t\tdirect: true\n\t\t\t}))\n\t\t);\n\n\t\t// Remove duplicates\n\t\tconst modelsMap = {};\n\t\tfor (const model of models) {\n\t\t\tmodelsMap[model.id] = model;\n\t\t}\n\n\t\tmodels = Object.values(modelsMap);\n\t}\n\n\treturn models;\n};\n\ntype ChatCompletedForm = {\n\tmodel: string;\n\tmessages: string[];\n\tchat_id: string;\n\tsession_id: string;\n};\n\nexport const chatCompleted = async (token: string, body: ChatCompletedForm) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/chat/completed`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify(body)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\ntype ChatActionForm = {\n\tmodel: string;\n\tmessages: string[];\n\tchat_id: string;\n};\n\nexport const chatAction = async (token: string, action_id: string, body: ChatActionForm) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/chat/actions/${action_id}`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify(body)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const stopTask = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/tasks/stop/${id}`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getToolServerData = async (token: string, url: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${url}/openapi.json`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tconst data = {\n\t\topenapi: res,\n\t\tinfo: res.info,\n\t\tspecs: convertOpenApiToToolPayload(res)\n\t};\n\n\tconsole.log(data);\n\treturn data;\n};\n\nexport const getToolServersData = async (i18n, servers: object[]) => {\n\treturn (\n\t\tawait Promise.all(\n\t\t\tservers\n\t\t\t\t.filter((server) => server?.config?.enable)\n\t\t\t\t.map(async (server) => {\n\t\t\t\t\tconst data = await getToolServerData(server?.key, server?.url).catch((err) => {\n\t\t\t\t\t\ttoast.error(\n\t\t\t\t\t\t\ti18n.t(`Failed to connect to {{URL}} OpenAPI tool server`, {\n\t\t\t\t\t\t\t\tURL: server?.url\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tconst { openapi, info, specs } = data;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\turl: server?.url,\n\t\t\t\t\t\t\topenapi: openapi,\n\t\t\t\t\t\t\tinfo: info,\n\t\t\t\t\t\t\tspecs: specs\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t)\n\t).filter((server) => server);\n};\n\nexport const executeToolServer = async (\n\ttoken: string,\n\turl: string,\n\tname: string,\n\tparams: Record<string, any>,\n\tserverData: { openapi: any; info: any; specs: any }\n) => {\n\tlet error = null;\n\n\ttry {\n\t\t// Find the matching operationId in the OpenAPI spec\n\t\tconst matchingRoute = Object.entries(serverData.openapi.paths).find(([_, methods]) =>\n\t\t\tObject.entries(methods as any).some(([__, operation]: any) => operation.operationId === name)\n\t\t);\n\n\t\tif (!matchingRoute) {\n\t\t\tthrow new Error(`No matching route found for operationId: ${name}`);\n\t\t}\n\n\t\tconst [routePath, methods] = matchingRoute;\n\n\t\tconst methodEntry = Object.entries(methods as any).find(\n\t\t\t([_, operation]: any) => operation.operationId === name\n\t\t);\n\n\t\tif (!methodEntry) {\n\t\t\tthrow new Error(`No matching method found for operationId: ${name}`);\n\t\t}\n\n\t\tconst [httpMethod, operation]: [string, any] = methodEntry;\n\n\t\t// Split parameters by type\n\t\tconst pathParams: Record<string, any> = {};\n\t\tconst queryParams: Record<string, any> = {};\n\t\tlet bodyParams: any = {};\n\n\t\tif (operation.parameters) {\n\t\t\toperation.parameters.forEach((param: any) => {\n\t\t\t\tconst paramName = param.name;\n\t\t\t\tconst paramIn = param.in;\n\t\t\t\tif (params.hasOwnProperty(paramName)) {\n\t\t\t\t\tif (paramIn === 'path') {\n\t\t\t\t\t\tpathParams[paramName] = params[paramName];\n\t\t\t\t\t} else if (paramIn === 'query') {\n\t\t\t\t\t\tqueryParams[paramName] = params[paramName];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet finalUrl = `${url}${routePath}`;\n\n\t\t// Replace path parameters (`{param}`)\n\t\tObject.entries(pathParams).forEach(([key, value]) => {\n\t\t\tfinalUrl = finalUrl.replace(new RegExp(`{${key}}`, 'g'), encodeURIComponent(value));\n\t\t});\n\n\t\t// Append query parameters to URL if any\n\t\tif (Object.keys(queryParams).length > 0) {\n\t\t\tconst queryString = new URLSearchParams(\n\t\t\t\tObject.entries(queryParams).map(([k, v]) => [k, String(v)])\n\t\t\t).toString();\n\t\t\tfinalUrl += `?${queryString}`;\n\t\t}\n\n\t\t// Handle requestBody composite\n\t\tif (operation.requestBody && operation.requestBody.content) {\n\t\t\tconst contentType = Object.keys(operation.requestBody.content)[0];\n\t\t\tif (params !== undefined) {\n\t\t\t\tbodyParams = params;\n\t\t\t} else {\n\t\t\t\t// Optional: Fallback or explicit error if body is expected but not provided\n\t\t\t\tthrow new Error(`Request body expected for operation '${name}' but none found.`);\n\t\t\t}\n\t\t}\n\n\t\t// Prepare headers and request options\n\t\tconst headers: Record<string, string> = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t};\n\n\t\tlet requestOptions: RequestInit = {\n\t\t\tmethod: httpMethod.toUpperCase(),\n\t\t\theaders\n\t\t};\n\n\t\tif (['post', 'put', 'patch'].includes(httpMethod.toLowerCase()) && operation.requestBody) {\n\t\t\trequestOptions.body = JSON.stringify(bodyParams);\n\t\t}\n\n\t\tconst res = await fetch(finalUrl, requestOptions);\n\t\tif (!res.ok) {\n\t\t\tconst resText = await res.text();\n\t\t\tthrow new Error(`HTTP error! Status: ${res.status}. Message: ${resText}`);\n\t\t}\n\n\t\treturn await res.json();\n\t} catch (err: any) {\n\t\terror = err.message;\n\t\tconsole.error('API Request Error:', error);\n\t\treturn { error };\n\t}\n};\n\nexport const getTaskConfig = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/config`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updateTaskConfig = async (token: string, config: object) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/config/update`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify(config)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const generateTitle = async (\n\ttoken: string = '',\n\tmodel: string,\n\tmessages: string[],\n\tchat_id?: string\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/title/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tmessages: messages,\n\t\t\t...(chat_id && { chat_id: chat_id })\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res?.choices[0]?.message?.content.replace(/[\"']/g, '') ?? 'New Chat';\n};\n\nexport const generateTags = async (\n\ttoken: string = '',\n\tmodel: string,\n\tmessages: string,\n\tchat_id?: string\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/tags/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tmessages: messages,\n\t\t\t...(chat_id && { chat_id: chat_id })\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\ttry {\n\t\t// Step 1: Safely extract the response string\n\t\tconst response = res?.choices[0]?.message?.content ?? '';\n\n\t\t// Step 2: Attempt to fix common JSON format issues like single quotes\n\t\tconst sanitizedResponse = response.replace(/['‘’`]/g, '\"'); // Convert single quotes to double quotes for valid JSON\n\n\t\t// Step 3: Find the relevant JSON block within the response\n\t\tconst jsonStartIndex = sanitizedResponse.indexOf('{');\n\t\tconst jsonEndIndex = sanitizedResponse.lastIndexOf('}');\n\n\t\t// Step 4: Check if we found a valid JSON block (with both `{` and `}`)\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\n\t\t\tconst jsonResponse = sanitizedResponse.substring(jsonStartIndex, jsonEndIndex + 1);\n\n\t\t\t// Step 5: Parse the JSON block\n\t\t\tconst parsed = JSON.parse(jsonResponse);\n\n\t\t\t// Step 6: If there's a \"tags\" key, return the tags array; otherwise, return an empty array\n\t\t\tif (parsed && parsed.tags) {\n\t\t\t\treturn Array.isArray(parsed.tags) ? parsed.tags : [];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\t// If no valid JSON block found, return an empty array\n\t\treturn [];\n\t} catch (e) {\n\t\t// Catch and safely return empty array on any parsing errors\n\t\tconsole.error('Failed to parse response: ', e);\n\t\treturn [];\n\t}\n};\n\nexport const generateEmoji = async (\n\ttoken: string = '',\n\tmodel: string,\n\tprompt: string,\n\tchat_id?: string\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/emoji/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tprompt: prompt,\n\t\t\t...(chat_id && { chat_id: chat_id })\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tconst response = res?.choices[0]?.message?.content.replace(/[\"']/g, '') ?? null;\n\n\tif (response) {\n\t\tif (/\\p{Extended_Pictographic}/u.test(response)) {\n\t\t\treturn response.match(/\\p{Extended_Pictographic}/gu)[0];\n\t\t}\n\t}\n\n\treturn null;\n};\n\nexport const generateQueries = async (\n\ttoken: string = '',\n\tmodel: string,\n\tmessages: object[],\n\tprompt: string,\n\ttype?: string = 'web_search'\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/queries/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tmessages: messages,\n\t\t\tprompt: prompt,\n\t\t\ttype: type\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\t// Step 1: Safely extract the response string\n\tconst response = res?.choices[0]?.message?.content ?? '';\n\n\ttry {\n\t\tconst jsonStartIndex = response.indexOf('{');\n\t\tconst jsonEndIndex = response.lastIndexOf('}');\n\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\n\t\t\tconst jsonResponse = response.substring(jsonStartIndex, jsonEndIndex + 1);\n\n\t\t\t// Step 5: Parse the JSON block\n\t\t\tconst parsed = JSON.parse(jsonResponse);\n\n\t\t\t// Step 6: If there's a \"queries\" key, return the queries array; otherwise, return an empty array\n\t\t\tif (parsed && parsed.queries) {\n\t\t\t\treturn Array.isArray(parsed.queries) ? parsed.queries : [];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\t// If no valid JSON block found, return response as is\n\t\treturn [response];\n\t} catch (e) {\n\t\t// Catch and safely return empty array on any parsing errors\n\t\tconsole.error('Failed to parse response: ', e);\n\t\treturn [response];\n\t}\n};\n\nexport const generateAutoCompletion = async (\n\ttoken: string = '',\n\tmodel: string,\n\tprompt: string,\n\tmessages?: object[],\n\ttype: string = 'search query'\n) => {\n\tconst controller = new AbortController();\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/auto/completions`, {\n\t\tsignal: controller.signal,\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tprompt: prompt,\n\t\t\t...(messages && { messages: messages }),\n\t\t\ttype: type,\n\t\t\tstream: false\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tconst response = res?.choices[0]?.message?.content ?? '';\n\n\ttry {\n\t\tconst jsonStartIndex = response.indexOf('{');\n\t\tconst jsonEndIndex = response.lastIndexOf('}');\n\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\n\t\t\tconst jsonResponse = response.substring(jsonStartIndex, jsonEndIndex + 1);\n\n\t\t\t// Step 5: Parse the JSON block\n\t\t\tconst parsed = JSON.parse(jsonResponse);\n\n\t\t\t// Step 6: If there's a \"queries\" key, return the queries array; otherwise, return an empty array\n\t\t\tif (parsed && parsed.text) {\n\t\t\t\treturn parsed.text;\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\t// If no valid JSON block found, return response as is\n\t\treturn response;\n\t} catch (e) {\n\t\t// Catch and safely return empty array on any parsing errors\n\t\tconsole.error('Failed to parse response: ', e);\n\t\treturn response;\n\t}\n};\n\nexport const generateMoACompletion = async (\n\ttoken: string = '',\n\tmodel: string,\n\tprompt: string,\n\tresponses: string[]\n) => {\n\tconst controller = new AbortController();\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/moa/completions`, {\n\t\tsignal: controller.signal,\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tprompt: prompt,\n\t\t\tresponses: responses,\n\t\t\tstream: true\n\t\t})\n\t}).catch((err) => {\n\t\tconsole.log(err);\n\t\terror = err;\n\t\treturn null;\n\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn [res, controller];\n};\n\nexport const getPipelinesList = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/list`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tlet pipelines = res?.data ?? [];\n\treturn pipelines;\n};\n\nexport const uploadPipeline = async (token: string, file: File, urlIdx: string) => {\n\tlet error = null;\n\n\t// Create a new FormData object to handle the file upload\n\tconst formData = new FormData();\n\tformData.append('file', file);\n\tformData.append('urlIdx', urlIdx);\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/upload`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t// 'Content-Type': 'multipart/form-data' is not needed as Fetch API will set it automatically\n\t\t},\n\t\tbody: formData\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const downloadPipeline = async (token: string, url: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/add`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turl: url,\n\t\t\turlIdx: urlIdx\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const deletePipeline = async (token: string, id: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/delete`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tid: id,\n\t\t\turlIdx: urlIdx\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getPipelines = async (token: string, urlIdx?: string) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/?${searchParams.toString()}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tlet pipelines = res?.data ?? [];\n\treturn pipelines;\n};\n\nexport const getPipelineValves = async (token: string, pipeline_id: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves?${searchParams.toString()}`,\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t}\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getPipelineValvesSpec = async (token: string, pipeline_id: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves/spec?${searchParams.toString()}`,\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t}\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updatePipelineValves = async (\n\ttoken: string = '',\n\tpipeline_id: string,\n\tvalves: object,\n\turlIdx: string\n) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves/update?${searchParams.toString()}`,\n\t\t{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t},\n\t\t\tbody: JSON.stringify(valves)\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getBackendConfig = async () => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config`, {\n\t\tmethod: 'GET',\n\t\tcredentials: 'include',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getChangelog = async () => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/changelog`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getVersionUpdates = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/version/updates`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getModelFilterConfig = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/model/filter`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updateModelFilterConfig = async (\n\ttoken: string,\n\tenabled: boolean,\n\tmodels: string[]\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/model/filter`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tenabled: enabled,\n\t\t\tmodels: models\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getWebhookUrl = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/webhook`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.url;\n};\n\nexport const updateWebhookUrl = async (token: string, url: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/webhook`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turl: url\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.url;\n};\n\nexport const getCommunitySharingEnabledStatus = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/community_sharing`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const toggleCommunitySharingEnabledStatus = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/community_sharing/toggle`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err.detail;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getModelConfig = async (token: string): Promise<GlobalModelConfig> => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/models`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.models;\n};\n\nexport interface ModelConfig {\n\tid: string;\n\tname: string;\n\tmeta: ModelMeta;\n\tbase_model_id?: string;\n\tparams: ModelParams;\n}\n\nexport interface ModelMeta {\n\tdescription?: string;\n\tcapabilities?: object;\n\tprofile_image_url?: string;\n}\n\nexport interface ModelParams {}\n\nexport type GlobalModelConfig = ModelConfig[];\n\nexport const updateModelConfig = async (token: string, config: GlobalModelConfig) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/models`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodels: config\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n"],"names":["getModels","token","connections","base","error","res","WEBUI_BASE_URL","err","models","localModels","OPENAI_API_BASE_URLS","OPENAI_API_KEYS","OPENAI_API_CONFIGS","requests","idx","url","apiConfig","enable","modelIds","modelList","modelId","getOpenAIModelsDirect","responses","response","model","prefixId","tags","modelsMap","chatCompleted","body","chatAction","action_id","stopTask","id","getToolServerData","data","convertOpenApiToToolPayload","getToolServersData","i18n","servers","server","_a","toast","openapi","info","specs","executeToolServer","name","params","serverData","matchingRoute","_","methods","__","operation","routePath","methodEntry","httpMethod","pathParams","queryParams","bodyParams","param","paramName","paramIn","finalUrl","key","value","queryString","k","v","contentType","headers","requestOptions","resText","getTaskConfig","updateTaskConfig","config","generateTags","messages","chat_id","sanitizedResponse","_b","jsonStartIndex","jsonEndIndex","jsonResponse","parsed","e","generateEmoji","prompt","generateAutoCompletion","type","controller","generateMoACompletion","getPipelinesList","uploadPipeline","file","urlIdx","formData","downloadPipeline","deletePipeline","getPipelines","searchParams","getPipelineValves","pipeline_id","getPipelineValvesSpec","updatePipelineValves","valves","getBackendConfig","getChangelog","getVersionUpdates","getWebhookUrl","updateWebhookUrl"],"mappings":"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"}